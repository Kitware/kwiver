KWIVER v1.4.0 Release Notes
===========================

This is a minor release of KWIVER that provides both new functionality and
fixes over the previous v1.3.0 release.

Updates since v1.3.0
--------------------

Vital

 * Added constructors taking initalizer lists to mesh types for easier
   initialization.
 * Added a new abstract algorithm, uv_unwrap_mesh, which unwraps a mesh and generates normalized texture coordinates.

 * Added a foreach_pixel helper function to apply an operation at every
   pixel of a const image.

 * Added the data_serializer base algorithm to support serilization
   of Vital types for distributed processing and other uses.

 * Applied a new approach to adding metadata to plugins. The plugin
   name and description are now specified in the plugin
   header. Added new plugin registrar class framework to simplify the
   registration process.

 * Promoted version.h from sprokit to vital for use across all of KWIVER.

 * Added additional range helpers indirect and valid.  The former provides
   access to iterators while still allowing a range-based for to be used.  The
   latter filters iteration so that only "valid" items are visited.

Vital Tools

 * Converted tools to use applet plugin approach.

 * Converted stand-alone tools to reside under the main "kwiver" top
   level tool. Individual tools are specified as a parameter to the
   "kwiver" tool runner.

Vital Bindings

Arrows: Core

 * Created a new plugin for core applets

 * Added an applet to render meshes into depth or height maps

 * Added mesh_operations.h, initially with a function to triangulate a mesh.
   That is, subdivide mesh faces into triangles.

 * Added an implementation for triangular mesh unwrapping. The method
   transforms each face independently to 2D and packs them in an
   almost square texture.

Arrows: FFmpeg

Arrows: GDAL

Arrows: OpenCV

Arrows: Serialization

Arrows: VXL

Sprokit

Sprokit: Processes

  * Added new methods which are called when a requested port is
    missing. This can be used to dynamically create ports. Previously
    this was done by overriding the _{input,output}_port_info()
    method.  The new approach is an optimization because the
    _*_port_info() methods are also called to locate ports for data
    transfer. The process specific override can add a lot of overhead
    to the port info calls.

Tools

Unit Tests

Bug Fixes
--------
